{"id":"node_modules/ol/format/filter/EqualTo.js","dependencies":[{"name":"/Users/kyleweingart/Documents/working/openlayers_myexamples/WPSClip/node_modules/ol/format/filter/EqualTo.js.map","includedInParent":true,"mtime":499162500000},{"name":"/Users/kyleweingart/Documents/working/openlayers_myexamples/WPSClip/node_modules/ol/src/format/filter/EqualTo.js","includedInParent":true,"mtime":499162500000},{"name":"/Users/kyleweingart/Documents/working/openlayers_myexamples/WPSClip/package.json","includedInParent":true,"mtime":1588186225029},{"name":"/Users/kyleweingart/Documents/working/openlayers_myexamples/WPSClip/node_modules/ol/package.json","includedInParent":true,"mtime":1588189842727},{"name":"./ComparisonBinary.js","loc":{"line":17,"column":29},"parent":"/Users/kyleweingart/Documents/working/openlayers_myexamples/WPSClip/node_modules/ol/format/filter/EqualTo.js","resolved":"/Users/kyleweingart/Documents/working/openlayers_myexamples/WPSClip/node_modules/ol/format/filter/ComparisonBinary.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _ComparisonBinary = _interopRequireDefault(require(\"./ComparisonBinary.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar __extends = void 0 && (void 0).__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/format/filter/EqualTo\n */\n\n\n/**\n * @classdesc\n * Represents a `<PropertyIsEqualTo>` comparison operator.\n * @api\n */\nvar EqualTo =\n/** @class */\nfunction (_super) {\n  __extends(EqualTo, _super);\n  /**\n   * @param {!string} propertyName Name of the context property to compare.\n   * @param {!(string|number)} expression The value to compare.\n   * @param {boolean=} opt_matchCase Case-sensitive?\n   */\n\n\n  function EqualTo(propertyName, expression, opt_matchCase) {\n    return _super.call(this, 'PropertyIsEqualTo', propertyName, expression, opt_matchCase) || this;\n  }\n\n  return EqualTo;\n}(_ComparisonBinary.default);\n\nvar _default = EqualTo;\nexports.default = _default;"},"sourceMaps":{"js":{"mappings":[{"source":"../../src/format/filter/EqualTo.js","name":null,"original":{"line":4,"column":0},"generated":{"line":8,"column":0}},{"source":"../../src/format/filter/EqualTo.js","name":null,"original":{"line":1,"column":0},"generated":{"line":35,"column":0}},{"source":"../../src/format/filter/EqualTo.js","name":null,"original":{"line":6,"column":0},"generated":{"line":40,"column":0}},{"source":"../../src/format/filter/EqualTo.js","name":null,"original":{"line":11,"column":0},"generated":{"line":45,"column":0}},{"source":"../../src/format/filter/EqualTo.js","name":null,"original":{"line":11,"column":0},"generated":{"line":45,"column":4}},{"source":"../../src/format/filter/EqualTo.js","name":null,"original":{"line":11,"column":0},"generated":{"line":45,"column":11}},{"source":"../../src/format/filter/EqualTo.js","name":null,"original":{"line":11,"column":0},"generated":{"line":46,"column":0}},{"source":"../../src/format/filter/EqualTo.js","name":null,"original":{"line":11,"column":0},"generated":{"line":47,"column":0}},{"source":"../../src/format/filter/EqualTo.js","name":null,"original":{"line":11,"column":0},"generated":{"line":47,"column":10}},{"source":"../../src/format/filter/EqualTo.js","name":null,"original":{"line":11,"column":0},"generated":{"line":47,"column":16}},{"source":"../../src/format/filter/EqualTo.js","name":null,"original":{"line":11,"column":0},"generated":{"line":47,"column":18}},{"source":"../../src/format/filter/EqualTo.js","name":null,"original":{"line":11,"column":22},"generated":{"line":48,"column":0}},{"source":"../../src/format/filter/EqualTo.js","name":null,"original":{"line":11,"column":22},"generated":{"line":48,"column":2}},{"source":"../../src/format/filter/EqualTo.js","name":null,"original":{"line":11,"column":22},"generated":{"line":48,"column":11}},{"source":"../../src/format/filter/EqualTo.js","name":null,"original":{"line":11,"column":22},"generated":{"line":48,"column":12}},{"source":"../../src/format/filter/EqualTo.js","name":null,"original":{"line":11,"column":22},"generated":{"line":48,"column":19}},{"source":"../../src/format/filter/EqualTo.js","name":null,"original":{"line":11,"column":22},"generated":{"line":48,"column":21}},{"source":"../../src/format/filter/EqualTo.js","name":null,"original":{"line":11,"column":22},"generated":{"line":48,"column":27}},{"source":"../../src/format/filter/EqualTo.js","name":null,"original":{"line":11,"column":22},"generated":{"line":48,"column":28}},{"source":"../../src/format/filter/EqualTo.js","name":null,"original":{"line":13,"column":2},"generated":{"line":49,"column":0}},{"source":"../../src/format/filter/EqualTo.js","name":null,"original":{"line":18,"column":2},"generated":{"line":56,"column":0}},{"source":"../../src/format/filter/EqualTo.js","name":null,"original":{"line":18,"column":2},"generated":{"line":56,"column":11}},{"source":"../../src/format/filter/EqualTo.js","name":null,"original":{"line":18,"column":2},"generated":{"line":56,"column":18}},{"source":"../../src/format/filter/EqualTo.js","name":null,"original":{"line":18,"column":14},"generated":{"line":56,"column":19}},{"source":"../../src/format/filter/EqualTo.js","name":null,"original":{"line":18,"column":2},"generated":{"line":56,"column":31}},{"source":"../../src/format/filter/EqualTo.js","name":null,"original":{"line":18,"column":28},"generated":{"line":56,"column":33}},{"source":"../../src/format/filter/EqualTo.js","name":null,"original":{"line":18,"column":2},"generated":{"line":56,"column":43}},{"source":"../../src/format/filter/EqualTo.js","name":null,"original":{"line":18,"column":40},"generated":{"line":56,"column":45}},{"source":"../../src/format/filter/EqualTo.js","name":null,"original":{"line":18,"column":2},"generated":{"line":56,"column":58}},{"source":"../../src/format/filter/EqualTo.js","name":null,"original":{"line":18,"column":53},"generated":{"line":56,"column":60}},{"source":"../../src/format/filter/EqualTo.js","name":null,"original":{"line":19,"column":4},"generated":{"line":57,"column":11}},{"source":"../../src/format/filter/EqualTo.js","name":null,"original":{"line":19,"column":4},"generated":{"line":57,"column":17}},{"source":"../../src/format/filter/EqualTo.js","name":null,"original":{"line":19,"column":4},"generated":{"line":57,"column":18}},{"source":"../../src/format/filter/EqualTo.js","name":null,"original":{"line":19,"column":4},"generated":{"line":57,"column":22}},{"source":"../../src/format/filter/EqualTo.js","name":null,"original":{"line":19,"column":4},"generated":{"line":57,"column":23}},{"source":"../../src/format/filter/EqualTo.js","name":null,"original":{"line":19,"column":4},"generated":{"line":57,"column":27}},{"source":"../../src/format/filter/EqualTo.js","name":null,"original":{"line":19,"column":10},"generated":{"line":57,"column":29}},{"source":"../../src/format/filter/EqualTo.js","name":null,"original":{"line":19,"column":4},"generated":{"line":57,"column":48}},{"source":"../../src/format/filter/EqualTo.js","name":null,"original":{"line":19,"column":31},"generated":{"line":57,"column":50}},{"source":"../../src/format/filter/EqualTo.js","name":null,"original":{"line":19,"column":4},"generated":{"line":57,"column":62}},{"source":"../../src/format/filter/EqualTo.js","name":null,"original":{"line":19,"column":45},"generated":{"line":57,"column":64}},{"source":"../../src/format/filter/EqualTo.js","name":null,"original":{"line":19,"column":4},"generated":{"line":57,"column":74}},{"source":"../../src/format/filter/EqualTo.js","name":null,"original":{"line":19,"column":57},"generated":{"line":57,"column":76}},{"source":"../../src/format/filter/EqualTo.js","name":null,"original":{"line":19,"column":4},"generated":{"line":57,"column":89}},{"source":"../../src/format/filter/EqualTo.js","name":null,"original":{"line":19,"column":71},"generated":{"line":57,"column":94}},{"source":"../../src/format/filter/EqualTo.js","name":null,"original":{"line":20,"column":3},"generated":{"line":58,"column":0}},{"source":"../../src/format/filter/EqualTo.js","name":null,"original":{"line":22,"column":0},"generated":{"line":60,"column":0}},{"source":"../../src/format/filter/EqualTo.js","name":null,"original":{"line":22,"column":0},"generated":{"line":60,"column":9}},{"source":"../../src/format/filter/EqualTo.js","name":null,"original":{"line":22,"column":0},"generated":{"line":60,"column":16}},{"source":"../../src/format/filter/EqualTo.js","name":null,"original":{"line":11,"column":0},"generated":{"line":61,"column":0}},{"source":"../../src/format/filter/EqualTo.js","name":null,"original":{"line":11,"column":0},"generated":{"line":61,"column":1}},{"source":"../../src/format/filter/EqualTo.js","name":null,"original":{"line":11,"column":22},"generated":{"line":61,"column":2}},{"source":"../../src/format/filter/EqualTo.js","name":null,"original":{"line":11,"column":0},"generated":{"line":61,"column":27}},{"source":"../../src/format/filter/EqualTo.js","name":null,"original":{"line":11,"column":0},"generated":{"line":61,"column":28}},{"source":"../../src/format/filter/EqualTo.js","name":null,"original":{"line":24,"column":15},"generated":{"line":63,"column":15}}],"sources":{"../../src/format/filter/EqualTo.js":"/**\n * @module ol/format/filter/EqualTo\n */\nimport ComparisonBinary from './ComparisonBinary.js';\n\n/**\n * @classdesc\n * Represents a `<PropertyIsEqualTo>` comparison operator.\n * @api\n */\nclass EqualTo extends ComparisonBinary {\n\n  /**\n   * @param {!string} propertyName Name of the context property to compare.\n   * @param {!(string|number)} expression The value to compare.\n   * @param {boolean=} opt_matchCase Case-sensitive?\n   */\n  constructor(propertyName, expression, opt_matchCase) {\n    super('PropertyIsEqualTo', propertyName, expression, opt_matchCase);\n  }\n\n}\n\nexport default EqualTo;\n"},"lineCount":null}},"error":null,"hash":"b2dd80cbb8e52b978fe1d0f6cdb218be","cacheData":{"env":{}}}