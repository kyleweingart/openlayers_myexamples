{"id":"node_modules/elm-pep/dist/elm-pep.js","dependencies":[{"name":"/Users/kyleweingart/Documents/working/openlayers_myexamples/VectorClip/node_modules/elm-pep/dist/elm-pep.js.map","includedInParent":true,"mtime":499162500000},{"name":"/Users/kyleweingart/Documents/working/openlayers_myexamples/VectorClip/node_modules/elm-pep/src/elm-pep.js","includedInParent":true,"mtime":499162500000},{"name":"/Users/kyleweingart/Documents/working/openlayers_myexamples/VectorClip/package.json","includedInParent":true,"mtime":1586984203875},{"name":"/Users/kyleweingart/Documents/working/openlayers_myexamples/VectorClip/node_modules/elm-pep/package.json","includedInParent":true,"mtime":1586983704314}],"generated":{"js":"// This Source Code Form is subject to the terms of the Mozilla Public\n// License, v. 2.0. If a copy of the MPL was not distributed with this\n// file, You can obtain one at http://mozilla.org/MPL/2.0/\n// Variable to hold current primary touch event identifier.\n// iOS needs this since it does not attribute\n// identifier 0 to primary touch event.\nvar primaryTouchId = null;\n// Variable to hold mouse pointer captures.\nvar mouseCaptureTarget = null;\nif (!(\"PointerEvent\" in window)) {\n    // Define {set,release}PointerCapture\n    definePointerCapture();\n    // Create Pointer polyfill from mouse events only on non-touch device\n    if (!(\"TouchEvent\" in window)) {\n        addMouseToPointerListener(document, \"mousedown\", \"pointerdown\");\n        addMouseToPointerListener(document, \"mousemove\", \"pointermove\");\n        addMouseToPointerListener(document, \"mouseup\", \"pointerup\");\n    }\n    // Define Pointer polyfill from touch events\n    addTouchToPointerListener(document, \"touchstart\", \"pointerdown\");\n    addTouchToPointerListener(document, \"touchmove\", \"pointermove\");\n    addTouchToPointerListener(document, \"touchend\", \"pointerup\");\n}\n// Function defining {set,release}PointerCapture from {set,releas}Capture\nfunction definePointerCapture() {\n    Element.prototype.setPointerCapture = Element.prototype.setCapture;\n    Element.prototype.releasePointerCapture = Element.prototype.releaseCapture;\n}\n// Function converting a Mouse event to a Pointer event.\nfunction addMouseToPointerListener(target, mouseType, pointerType) {\n    target.addEventListener(mouseType, function (mouseEvent) {\n        var pointerEvent = new MouseEvent(pointerType, mouseEvent);\n        pointerEvent.pointerId = 1;\n        pointerEvent.isPrimary = true;\n        pointerEvent.pointerType = \"mouse\";\n        pointerEvent.width = 1;\n        pointerEvent.height = 1;\n        pointerEvent.tiltX = 0;\n        pointerEvent.tiltY = 0;\n        // pressure is 0.5 if a button is holded\n        \"buttons\" in mouseEvent && mouseEvent.buttons !== 0\n            ? (pointerEvent.pressure = 0.5)\n            : (pointerEvent.pressure = 0);\n        // if already capturing mouse event, transfer target\n        // and don't forget implicit release on mouseup.\n        var target = mouseEvent.target;\n        if (mouseCaptureTarget !== null) {\n            target = mouseCaptureTarget;\n            if (mouseType === \"mouseup\") {\n                mouseCaptureTarget = null;\n            }\n        }\n        target.dispatchEvent(pointerEvent);\n        if (pointerEvent.defaultPrevented) {\n            mouseEvent.preventDefault();\n        }\n    });\n}\n// Function converting a Touch event to a Pointer event.\nfunction addTouchToPointerListener(target, touchType, pointerType) {\n    target.addEventListener(touchType, function (touchEvent) {\n        var changedTouches = touchEvent.changedTouches;\n        var nbTouches = changedTouches.length;\n        for (var t = 0; t < nbTouches; t++) {\n            var pointerEvent = new CustomEvent(pointerType, {\n                bubbles: true,\n                cancelable: true\n            });\n            pointerEvent.ctrlKey = touchEvent.ctrlKey;\n            pointerEvent.shiftKey = touchEvent.shiftKey;\n            pointerEvent.altKey = touchEvent.altKey;\n            pointerEvent.metaKey = touchEvent.metaKey;\n            var touch = changedTouches.item(t);\n            pointerEvent.clientX = touch.clientX;\n            pointerEvent.clientY = touch.clientY;\n            pointerEvent.screenX = touch.screenX;\n            pointerEvent.screenY = touch.screenY;\n            pointerEvent.pageX = touch.pageX;\n            pointerEvent.pageY = touch.pageY;\n            var rect = touch.target.getBoundingClientRect();\n            pointerEvent.offsetX = touch.clientX - rect.left;\n            pointerEvent.offsetY = touch.clientY - rect.top;\n            pointerEvent.pointerId = 1 + touch.identifier;\n            // Default values for standard MouseEvent fields.\n            pointerEvent.button = 0;\n            pointerEvent.buttons = 1;\n            pointerEvent.movementX = 0;\n            pointerEvent.movementY = 0;\n            pointerEvent.region = null;\n            pointerEvent.relatedTarget = null;\n            pointerEvent.x = pointerEvent.clientX;\n            pointerEvent.y = pointerEvent.clientY;\n            // Pointer event details\n            pointerEvent.pointerType = \"touch\";\n            pointerEvent.width = 1;\n            pointerEvent.height = 1;\n            pointerEvent.tiltX = 0;\n            pointerEvent.tiltY = 0;\n            pointerEvent.pressure = 1;\n            // First touch is the primary pointer event.\n            if (touchType === \"touchstart\" && primaryTouchId === null) {\n                primaryTouchId = touch.identifier;\n            }\n            pointerEvent.isPrimary = touch.identifier === primaryTouchId;\n            // If first touch ends, reset primary touch id.\n            if (touchType === \"touchend\" && pointerEvent.isPrimary) {\n                primaryTouchId = null;\n            }\n            touchEvent.target.dispatchEvent(pointerEvent);\n            if (pointerEvent.defaultPrevented) {\n                touchEvent.preventDefault();\n            }\n        }\n    });\n}\n"},"sourceMaps":{"js":{"version":3,"file":"elm-pep.js","sourceRoot":"","sources":["../src/elm-pep.js"],"names":[],"mappings":"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","sourcesContent":["// This Source Code Form is subject to the terms of the Mozilla Public\n// License, v. 2.0. If a copy of the MPL was not distributed with this\n// file, You can obtain one at http://mozilla.org/MPL/2.0/\n\n// Variable to hold current primary touch event identifier.\n// iOS needs this since it does not attribute\n// identifier 0 to primary touch event.\nlet primaryTouchId = null;\n\n// Variable to hold mouse pointer captures.\nlet mouseCaptureTarget = null;\n\nif (!(\"PointerEvent\" in window)) {\n  // Define {set,release}PointerCapture\n  definePointerCapture();\n\n  // Create Pointer polyfill from mouse events only on non-touch device\n  if (!(\"TouchEvent\" in window)) {\n    addMouseToPointerListener(document, \"mousedown\", \"pointerdown\");\n    addMouseToPointerListener(document, \"mousemove\", \"pointermove\");\n    addMouseToPointerListener(document, \"mouseup\", \"pointerup\");\n  }\n\n  // Define Pointer polyfill from touch events\n  addTouchToPointerListener(document, \"touchstart\", \"pointerdown\");\n  addTouchToPointerListener(document, \"touchmove\", \"pointermove\");\n  addTouchToPointerListener(document, \"touchend\", \"pointerup\");\n}\n\n// Function defining {set,release}PointerCapture from {set,releas}Capture\nfunction definePointerCapture() {\n  Element.prototype.setPointerCapture = Element.prototype.setCapture;\n  Element.prototype.releasePointerCapture = Element.prototype.releaseCapture;\n}\n\n// Function converting a Mouse event to a Pointer event.\nfunction addMouseToPointerListener(target, mouseType, pointerType) {\n  target.addEventListener(mouseType, mouseEvent => {\n    let pointerEvent = new MouseEvent(pointerType, mouseEvent);\n    pointerEvent.pointerId = 1;\n    pointerEvent.isPrimary = true;\n    pointerEvent.pointerType = \"mouse\";\n    pointerEvent.width = 1;\n    pointerEvent.height = 1;\n    pointerEvent.tiltX = 0;\n    pointerEvent.tiltY = 0;\n\n    // pressure is 0.5 if a button is holded\n    \"buttons\" in mouseEvent && mouseEvent.buttons !== 0\n      ? (pointerEvent.pressure = 0.5)\n      : (pointerEvent.pressure = 0);\n\n    // if already capturing mouse event, transfer target\n    // and don't forget implicit release on mouseup.\n    let target = mouseEvent.target;\n    if (mouseCaptureTarget !== null) {\n      target = mouseCaptureTarget;\n      if (mouseType === \"mouseup\") {\n        mouseCaptureTarget = null;\n      }\n    }\n\n    target.dispatchEvent(pointerEvent);\n    if (pointerEvent.defaultPrevented) {\n      mouseEvent.preventDefault();\n    }\n  });\n}\n\n// Function converting a Touch event to a Pointer event.\nfunction addTouchToPointerListener(target, touchType, pointerType) {\n  target.addEventListener(touchType, touchEvent => {\n    const changedTouches = touchEvent.changedTouches;\n    const nbTouches = changedTouches.length;\n    for (let t = 0; t < nbTouches; t++) {\n      let pointerEvent = new CustomEvent(pointerType, {\n        bubbles: true,\n        cancelable: true\n      });\n      pointerEvent.ctrlKey = touchEvent.ctrlKey;\n      pointerEvent.shiftKey = touchEvent.shiftKey;\n      pointerEvent.altKey = touchEvent.altKey;\n      pointerEvent.metaKey = touchEvent.metaKey;\n\n      const touch = changedTouches.item(t);\n      pointerEvent.clientX = touch.clientX;\n      pointerEvent.clientY = touch.clientY;\n      pointerEvent.screenX = touch.screenX;\n      pointerEvent.screenY = touch.screenY;\n      pointerEvent.pageX = touch.pageX;\n      pointerEvent.pageY = touch.pageY;\n      const rect = touch.target.getBoundingClientRect();\n      pointerEvent.offsetX = touch.clientX - rect.left;\n      pointerEvent.offsetY = touch.clientY - rect.top;\n      pointerEvent.pointerId = 1 + touch.identifier;\n\n      // Default values for standard MouseEvent fields.\n      pointerEvent.button = 0;\n      pointerEvent.buttons = 1;\n      pointerEvent.movementX = 0;\n      pointerEvent.movementY = 0;\n      pointerEvent.region = null;\n      pointerEvent.relatedTarget = null;\n      pointerEvent.x = pointerEvent.clientX;\n      pointerEvent.y = pointerEvent.clientY;\n\n      // Pointer event details\n      pointerEvent.pointerType = \"touch\";\n      pointerEvent.width = 1;\n      pointerEvent.height = 1;\n      pointerEvent.tiltX = 0;\n      pointerEvent.tiltY = 0;\n      pointerEvent.pressure = 1;\n\n      // First touch is the primary pointer event.\n      if (touchType === \"touchstart\" && primaryTouchId === null) {\n        primaryTouchId = touch.identifier;\n      }\n      pointerEvent.isPrimary = touch.identifier === primaryTouchId;\n\n      // If first touch ends, reset primary touch id.\n      if (touchType === \"touchend\" && pointerEvent.isPrimary) {\n        primaryTouchId = null;\n      }\n\n      touchEvent.target.dispatchEvent(pointerEvent);\n      if (pointerEvent.defaultPrevented) {\n        touchEvent.preventDefault();\n      }\n    }\n  });\n}\n"]}},"error":null,"hash":"363b936070f7cf0d0dbbc2f089b8f3d3","cacheData":{"env":{}}}